 
import React, { Component, useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import {
  Alert,
  Image,
  Text,
  TouchableOpacity,
  View,
  ViewPropTypes,
  Platform,
  StyleSheet
} from 'react-native';
 
import FingerprintScanner from 'react-native-fingerprint-scanner';
import ShakingText from './ShakingText';

const FingerprintScreen = (props) => {
  const [errorMessageLegacy] = useState(undefined);
  const [biometricLegacy] = useState(undefined);
  const [description] = useState(null);
 
  // const { style, handlePopupDismissedLegacy } = this.props;
 
  useEffect(() => {
    if (requiresLegacyAuthentication()) {
      authLegacy();
    } else {
      authCurrent();
    }

    return ()=>{FingerprintScanner.release();}
  },[]);


 
  const requiresLegacyAuthentication = () => {
    return Platform.Version < 23;
  }
 
  const authCurrent = () => {
    FingerprintScanner
      .authenticate({ title: 'Log in with Biometrics' })
      .then(() => {
        props.onAuthenticate();
      });
  }
 
  const authLegacy = () => {
    FingerprintScanner
      .authenticate({ onAttempt: this.handleAuthenticationAttemptedLegacy })
      .then(() => {
        // props.handlePopupDismissedLegacy();
        Alert.alert('Fingerprint Authentication', 'Authenticated successfully');
      })
      .catch((error) => {
        setState({ errorMessageLegacy: error.message, biometricLegacy: error.biometric });
        description.shake();
      });
  }
 
  const handleAuthenticationAttemptedLegacy = (error) => {
    setState({ errorMessageLegacy: error.message });
    description.shake();
  };

 
    return (
      <View style={styles.container}>
        <View style={[styles.contentContainer]}>
 
          <Image
            style={styles.logo}
            // source={require('./assets/finger_print.png')}
          />
 
          <Text style={styles.heading}>
            Biometric{'\n'}Authentication
          </Text>
          <ShakingText
            ref={(instance) => { description = instance; }}
            style={styles.description(!!errorMessageLegacy)}>
            {errorMessageLegacy || `Scan your ${biometricLegacy} on the\ndevice scanner to continue`}
          </ShakingText>
 
          <TouchableOpacity
            style={styles.buttonContainer}
            onPress={handlePopupDismissedLegacy}
            //onPress={() => {console.log('12314')}}

          >
            <Text style={styles.buttonText}>
              BACK TO MAIN
            </Text>
          </TouchableOpacity>
 
        </View>
      </View>
    );
 
 
  // render = () => {
  //   if (this.requiresLegacyAuthentication()) {
  //     return this.renderLegacy();
  //   }
 
  //   // current API UI provided by native BiometricPrompt
  //   return null;
  // }
}
 
// BiometricPopup.propTypes = {
//   onAuthenticate: PropTypes.func.isRequired,
//   handlePopupDismissedLegacy: PropTypes.func,
//   style: ViewPropTypes.style,
// };




const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(0, 164, 222, 0.9)',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
  },
  contentContainer: {
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#ffffff',
  },
  logo: {
    marginVertical: 45,
  },
  heading: {
    textAlign: 'center',
    color: '#00a4de',
    fontSize: 21,
  },
  description: (error) => ({
    textAlign: 'center',
    color: error ? '#ea3d13' : '#a5a5a5',
    height: 65,
    fontSize: 18,
    marginVertical: 10,
    marginHorizontal: 20,
  }),
  buttonContainer: {
    padding: 20,
  },
  buttonText: {
    color: '#8fbc5a',
    fontSize: 15,
    fontWeight: 'bold',
  },
});

export default FingerprintScreen;